generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  username        String   @unique
  password        String
  name            String
  email           String   @unique
  phoneNumber     String
  profilePicture  String
  role            String   @default("user") // 'user' | 'host' | 'admin'
  aboutMe         String?

  isBlocked       Boolean  @default(false)
  deletedAt       DateTime?

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relaties
  reviews         Review[]
  bookings        Booking[]
  properties      Property[] @relation("HostedProperties")
}

model Property {
  id             String   @id @default(uuid())
  title          String
  description    String
  location       String
  pricePerNight  Float
  bedroomCount   Int
  bathRoomCount  Int
  maxGuestCount  Int
  rating         Float

  isActive       Boolean  @default(true)
  deletedAt      DateTime?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relaties
  hostId         String
  host           User     @relation("HostedProperties", fields: [hostId], references: [id])
  amenities      PropertyAmenity[]
  bookings       Booking[]
  reviews        Review[]
}

model Amenity {
  id         String   @id @default(uuid())
  name       String
  icon       String?  // bijv. üì∂ of üç≥

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  properties PropertyAmenity[]
}

model PropertyAmenity {
  propertyId String
  amenityId  String

  property   Property @relation(fields: [propertyId], references: [id])
  amenity    Amenity  @relation(fields: [amenityId], references: [id])

  @@id([propertyId, amenityId])
}

model Booking {
  id              String   @id @default(uuid())
  userId          String
  propertyId      String
  checkinDate     DateTime
  checkoutDate    DateTime
  numberOfGuests  Int
  totalPrice      Float
  bookingStatus   String   // bijv. 'confirmed' | 'cancelled'

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  property  Property @relation(fields: [propertyId], references: [id])
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  rating     Int
  comment    String

  createdAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  property  Property @relation(fields: [propertyId], references: [id])
}
